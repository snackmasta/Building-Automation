@echo off
echo Starting Wastewater Treatment Plant Simulator...
echo.

set BASE_PATH=%~dp0..\..
set PYTHON_PATH=python
set SIM_PATH=%BASE_PATH%\src\simulation\wwtp_simulator.py

:: Check if Python is available
%PYTHON_PATH% --version >nul 2>&1
if %ERRORLEVEL% NEQ 0 (
    echo Python not found in PATH. Please install Python 3.8 or higher.
    exit /b 1
)

:: Check if the simulator script exists
if not exist "%SIM_PATH%" (
    echo.
    echo Simulator script not found at: %SIM_PATH%
    echo Creating simulator script...
    
    mkdir "%BASE_PATH%\src\simulation" 2>nul
    
    echo import time > "%SIM_PATH%"
    echo import random >> "%SIM_PATH%"
    echo import threading >> "%SIM_PATH%"
    echo import socket >> "%SIM_PATH%"
    echo import json >> "%SIM_PATH%"
    echo import os >> "%SIM_PATH%"
    echo import datetime >> "%SIM_PATH%"
    echo import sys >> "%SIM_PATH%"
    echo. >> "%SIM_PATH%"
    echo class WastewaterTreatmentSimulator: >> "%SIM_PATH%"
    echo     def __init__(self): >> "%SIM_PATH%"
    echo         self.running = True >> "%SIM_PATH%"
    echo         self.host = '127.0.0.1' >> "%SIM_PATH%"
    echo         self.port = 9000 >> "%SIM_PATH%"
    echo         print(f"Starting Wastewater Treatment Plant Simulator") >> "%SIM_PATH%"
    echo         print(f"Simulation server running on {self.host}:{self.port}") >> "%SIM_PATH%"
    echo         print("Press Ctrl+C to stop the simulator") >> "%SIM_PATH%"
    echo. >> "%SIM_PATH%"
    echo         # Initialize process variables >> "%SIM_PATH%"
    echo         self.init_process_vars() >> "%SIM_PATH%"
    echo. >> "%SIM_PATH%"
    echo         # Start simulation thread >> "%SIM_PATH%"
    echo         self.sim_thread = threading.Thread(target=self.run_simulation) >> "%SIM_PATH%"
    echo         self.sim_thread.daemon = True >> "%SIM_PATH%"
    echo         self.sim_thread.start() >> "%SIM_PATH%"
    echo. >> "%SIM_PATH%"
    echo         # Start communication server >> "%SIM_PATH%"
    echo         self.start_server() >> "%SIM_PATH%"
    echo. >> "%SIM_PATH%"
    echo     def init_process_vars(self): >> "%SIM_PATH%"
    echo         # System status >> "%SIM_PATH%"
    echo         self.system_running = False >> "%SIM_PATH%"
    echo         self.emergency_stop = False >> "%SIM_PATH%"
    echo         self.auto_mode = True >> "%SIM_PATH%"
    echo         self.maintenance_mode = False >> "%SIM_PATH%"
    echo         self.storm_mode = False >> "%SIM_PATH%"
    echo         self.alarm_active = False >> "%SIM_PATH%"
    echo. >> "%SIM_PATH%"
    echo         # Process variables >> "%SIM_PATH%"
    echo         self.tank_level_1 = 2.5  # Primary tank level (m) >> "%SIM_PATH%"
    echo         self.tank_level_2 = 1.8  # Secondary tank level (m) >> "%SIM_PATH%"
    echo         self.flow_rate = 300.0   # Flow rate (m³/hr) >> "%SIM_PATH%"
    echo         self.ph_value = 7.2      # pH >> "%SIM_PATH%"
    echo         self.dissolved_oxygen = 5.5  # DO (mg/L) >> "%SIM_PATH%"
    echo         self.turbidity = 35.0    # Turbidity (NTU) >> "%SIM_PATH%"
    echo         self.chlorine = 2.3      # Chlorine (mg/L) >> "%SIM_PATH%"
    echo         self.temperature = 18.5  # Temperature (°C) >> "%SIM_PATH%"
    echo. >> "%SIM_PATH%"
    echo         # Equipment status >> "%SIM_PATH%"
    echo         self.pump_p101_status = False >> "%SIM_PATH%"
    echo         self.pump_p102_status = False >> "%SIM_PATH%"
    echo         self.mixer_m101_status = False >> "%SIM_PATH%"
    echo         self.mixer_m102_status = False >> "%SIM_PATH%"
    echo         self.blower_status = False >> "%SIM_PATH%"
    echo         self.uv_system_status = False >> "%SIM_PATH%"
    echo         self.screen_forward = False >> "%SIM_PATH%"
    echo         self.screen_reverse = False >> "%SIM_PATH%"
    echo. >> "%SIM_PATH%"
    echo         # Performance metrics >> "%SIM_PATH%"
    echo         self.treatment_efficiency = 95.0  # % >> "%SIM_PATH%"
    echo         self.energy_consumption = 175.0   # kW >> "%SIM_PATH%"
    echo         self.total_flow_today = 2568.0    # m³ >> "%SIM_PATH%"
    echo         self.chemical_usage = 120.5       # L >> "%SIM_PATH%"
    echo. >> "%SIM_PATH%"
    echo     def run_simulation(self): >> "%SIM_PATH%"
    echo         """Run the simulation loop""" >> "%SIM_PATH%"
    echo         while self.running: >> "%SIM_PATH%"
    echo             if self.system_running and not self.emergency_stop: >> "%SIM_PATH%"
    echo                 # Simulate tank levels >> "%SIM_PATH%"
    echo                 self.tank_level_1 += random.uniform(-0.05, 0.05) >> "%SIM_PATH%"
    echo                 self.tank_level_1 = max(0.1, min(5.0, self.tank_level_1)) >> "%SIM_PATH%"
    echo. >> "%SIM_PATH%"
    echo                 self.tank_level_2 += random.uniform(-0.03, 0.03) >> "%SIM_PATH%"
    echo                 self.tank_level_2 = max(0.1, min(5.0, self.tank_level_2)) >> "%SIM_PATH%"
    echo. >> "%SIM_PATH%"
    echo                 # Simulate flow rate >> "%SIM_PATH%"
    echo                 if self.pump_p101_status: >> "%SIM_PATH%"
    echo                     target_flow = 300 >> "%SIM_PATH%"
    echo                     self.flow_rate = self.flow_rate * 0.9 + target_flow * 0.1 + random.uniform(-10, 10) >> "%SIM_PATH%"
    echo                 else: >> "%SIM_PATH%"
    echo                     self.flow_rate = max(0, self.flow_rate * 0.8 + random.uniform(-5, 0)) >> "%SIM_PATH%"
    echo. >> "%SIM_PATH%"
    echo                 # Simulate other parameters >> "%SIM_PATH%"
    echo                 self.ph_value += random.uniform(-0.05, 0.05) >> "%SIM_PATH%"
    echo                 self.ph_value = max(6.0, min(9.0, self.ph_value)) >> "%SIM_PATH%"
    echo. >> "%SIM_PATH%"
    echo                 self.dissolved_oxygen += random.uniform(-0.1, 0.1) >> "%SIM_PATH%"
    echo                 if self.blower_status: >> "%SIM_PATH%"
    echo                     self.dissolved_oxygen = max(2.0, min(8.0, self.dissolved_oxygen + 0.05)) >> "%SIM_PATH%"
    echo                 else: >> "%SIM_PATH%"
    echo                     self.dissolved_oxygen = max(0.5, min(8.0, self.dissolved_oxygen - 0.05)) >> "%SIM_PATH%"
    echo. >> "%SIM_PATH%"
    echo                 self.turbidity += random.uniform(-1.0, 1.0) >> "%SIM_PATH%"
    echo                 self.turbidity = max(5.0, min(100.0, self.turbidity)) >> "%SIM_PATH%"
    echo. >> "%SIM_PATH%"
    echo                 self.chlorine += random.uniform(-0.05, 0.05) >> "%SIM_PATH%"
    echo                 self.chlorine = max(0.1, min(5.0, self.chlorine)) >> "%SIM_PATH%"
    echo. >> "%SIM_PATH%"
    echo                 self.temperature += random.uniform(-0.1, 0.1) >> "%SIM_PATH%"
    echo                 self.temperature = max(10.0, min(30.0, self.temperature)) >> "%SIM_PATH%"
    echo. >> "%SIM_PATH%"
    echo                 # Simulate performance metrics >> "%SIM_PATH%"
    echo                 self.treatment_efficiency = 100 * (1.0 - self.turbidity / 1000.0) + random.uniform(-2, 2) >> "%SIM_PATH%"
    echo                 self.treatment_efficiency = max(0, min(100, self.treatment_efficiency)) >> "%SIM_PATH%"
    echo. >> "%SIM_PATH%"
    echo                 self.energy_consumption = 100 + self.flow_rate / 4.0 + random.uniform(-10, 10) >> "%SIM_PATH%"
    echo                 if self.blower_status: >> "%SIM_PATH%"
    echo                     self.energy_consumption += 50 + random.uniform(-5, 5) >> "%SIM_PATH%"
    echo. >> "%SIM_PATH%"
    echo                 self.total_flow_today += self.flow_rate / 3600.0 >> "%SIM_PATH%"
    echo. >> "%SIM_PATH%"
    echo                 if self.ph_value < 7.0 or self.ph_value > 8.0: >> "%SIM_PATH%"
    echo                     self.chemical_usage += 0.01 >> "%SIM_PATH%"
    echo. >> "%SIM_PATH%"
    echo                 # Random alarms >> "%SIM_PATH%"
    echo                 if random.random() < 0.01: >> "%SIM_PATH%"
    echo                     self.alarm_active = True >> "%SIM_PATH%"
    echo. >> "%SIM_PATH%"
    echo             time.sleep(1) >> "%SIM_PATH%"
    echo. >> "%SIM_PATH%"
    echo     def start_server(self): >> "%SIM_PATH%"
    echo         """Start a socket server to provide data to HMI and other clients""" >> "%SIM_PATH%"
    echo         try: >> "%SIM_PATH%"
    echo             server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) >> "%SIM_PATH%"
    echo             server_socket.bind((self.host, self.port)) >> "%SIM_PATH%"
    echo             server_socket.listen(5) >> "%SIM_PATH%"
    echo             server_socket.settimeout(1) >> "%SIM_PATH%"
    echo. >> "%SIM_PATH%"
    echo             while self.running: >> "%SIM_PATH%"
    echo                 try: >> "%SIM_PATH%"
    echo                     client_socket, addr = server_socket.accept() >> "%SIM_PATH%"
    echo                     data = client_socket.recv(1024).decode('utf-8') >> "%SIM_PATH%"
    echo                     if data: >> "%SIM_PATH%"
    echo                         try: >> "%SIM_PATH%"
    echo                             command = json.loads(data) >> "%SIM_PATH%"
    echo                             response = self.process_command(command) >> "%SIM_PATH%"
    echo                             client_socket.send(json.dumps(response).encode('utf-8')) >> "%SIM_PATH%"
    echo                         except json.JSONDecodeError: >> "%SIM_PATH%"
    echo                             client_socket.send(json.dumps({"error": "Invalid JSON format"}).encode('utf-8')) >> "%SIM_PATH%"
    echo                     client_socket.close() >> "%SIM_PATH%"
    echo                 except socket.timeout: >> "%SIM_PATH%"
    echo                     pass >> "%SIM_PATH%"
    echo                 except Exception as e: >> "%SIM_PATH%"
    echo                     print(f"Server error: {e}") >> "%SIM_PATH%"
    echo. >> "%SIM_PATH%"
    echo         except KeyboardInterrupt: >> "%SIM_PATH%"
    echo             print("Simulator shutting down...") >> "%SIM_PATH%"
    echo         except Exception as e: >> "%SIM_PATH%"
    echo             print(f"Error starting server: {e}") >> "%SIM_PATH%"
    echo         finally: >> "%SIM_PATH%"
    echo             self.running = False >> "%SIM_PATH%"
    echo             if 'server_socket' in locals(): >> "%SIM_PATH%"
    echo                 server_socket.close() >> "%SIM_PATH%"
    echo. >> "%SIM_PATH%"
    echo     def process_command(self, command): >> "%SIM_PATH%"
    echo         """Process commands from clients""" >> "%SIM_PATH%"
    echo         cmd_type = command.get('type', '') >> "%SIM_PATH%"
    echo. >> "%SIM_PATH%"
    echo         if cmd_type == 'get_data': >> "%SIM_PATH%"
    echo             # Return current state of all process variables >> "%SIM_PATH%"
    echo             return { >> "%SIM_PATH%"
    echo                 'system_running': self.system_running, >> "%SIM_PATH%"
    echo                 'emergency_stop': self.emergency_stop, >> "%SIM_PATH%"
    echo                 'auto_mode': self.auto_mode, >> "%SIM_PATH%"
    echo                 'maintenance_mode': self.maintenance_mode, >> "%SIM_PATH%"
    echo                 'storm_mode': self.storm_mode, >> "%SIM_PATH%"
    echo                 'alarm_active': self.alarm_active, >> "%SIM_PATH%"
    echo                 'tank_level_1': self.tank_level_1, >> "%SIM_PATH%"
    echo                 'tank_level_2': self.tank_level_2, >> "%SIM_PATH%"
    echo                 'flow_rate': self.flow_rate, >> "%SIM_PATH%"
    echo                 'ph_value': self.ph_value, >> "%SIM_PATH%"
    echo                 'dissolved_oxygen': self.dissolved_oxygen, >> "%SIM_PATH%"
    echo                 'turbidity': self.turbidity, >> "%SIM_PATH%"
    echo                 'chlorine': self.chlorine, >> "%SIM_PATH%"
    echo                 'temperature': self.temperature, >> "%SIM_PATH%"
    echo                 'pump_p101_status': self.pump_p101_status, >> "%SIM_PATH%"
    echo                 'pump_p102_status': self.pump_p102_status, >> "%SIM_PATH%"
    echo                 'mixer_m101_status': self.mixer_m101_status, >> "%SIM_PATH%"
    echo                 'mixer_m102_status': self.mixer_m102_status, >> "%SIM_PATH%"
    echo                 'blower_status': self.blower_status, >> "%SIM_PATH%"
    echo                 'uv_system_status': self.uv_system_status, >> "%SIM_PATH%"
    echo                 'treatment_efficiency': self.treatment_efficiency, >> "%SIM_PATH%"
    echo                 'energy_consumption': self.energy_consumption, >> "%SIM_PATH%"
    echo                 'total_flow_today': self.total_flow_today, >> "%SIM_PATH%"
    echo                 'chemical_usage': self.chemical_usage, >> "%SIM_PATH%"
    echo                 'timestamp': datetime.datetime.now().isoformat() >> "%SIM_PATH%"
    echo             } >> "%SIM_PATH%"
    echo. >> "%SIM_PATH%"
    echo         elif cmd_type == 'set_control': >> "%SIM_PATH%"
    echo             # Set control variables based on command >> "%SIM_PATH%"
    echo             control = command.get('control', {}) >> "%SIM_PATH%"
    echo. >> "%SIM_PATH%"
    echo             # Update system status >> "%SIM_PATH%"
    echo             if 'system_running' in control: >> "%SIM_PATH%"
    echo                 self.system_running = bool(control['system_running']) >> "%SIM_PATH%"
    echo. >> "%SIM_PATH%"
    echo             if 'emergency_stop' in control: >> "%SIM_PATH%"
    echo                 self.emergency_stop = bool(control['emergency_stop']) >> "%SIM_PATH%"
    echo                 if self.emergency_stop: >> "%SIM_PATH%"
    echo                     self.system_running = False >> "%SIM_PATH%"
    echo. >> "%SIM_PATH%"
    echo             if 'auto_mode' in control: >> "%SIM_PATH%"
    echo                 self.auto_mode = bool(control['auto_mode']) >> "%SIM_PATH%"
    echo. >> "%SIM_PATH%"
    echo             if 'maintenance_mode' in control: >> "%SIM_PATH%"
    echo                 self.maintenance_mode = bool(control['maintenance_mode']) >> "%SIM_PATH%"
    echo. >> "%SIM_PATH%"
    echo             if 'storm_mode' in control: >> "%SIM_PATH%"
    echo                 self.storm_mode = bool(control['storm_mode']) >> "%SIM_PATH%"
    echo. >> "%SIM_PATH%"
    echo             # Update equipment status >> "%SIM_PATH%"
    echo             if 'pump_p101_status' in control: >> "%SIM_PATH%"
    echo                 self.pump_p101_status = bool(control['pump_p101_status']) >> "%SIM_PATH%"
    echo. >> "%SIM_PATH%"
    echo             if 'pump_p102_status' in control: >> "%SIM_PATH%"
    echo                 self.pump_p102_status = bool(control['pump_p102_status']) >> "%SIM_PATH%"
    echo. >> "%SIM_PATH%"
    echo             if 'mixer_m101_status' in control: >> "%SIM_PATH%"
    echo                 self.mixer_m101_status = bool(control['mixer_m101_status']) >> "%SIM_PATH%"
    echo. >> "%SIM_PATH%"
    echo             if 'mixer_m102_status' in control: >> "%SIM_PATH%"
    echo                 self.mixer_m102_status = bool(control['mixer_m102_status']) >> "%SIM_PATH%"
    echo. >> "%SIM_PATH%"
    echo             if 'blower_status' in control: >> "%SIM_PATH%"
    echo                 self.blower_status = bool(control['blower_status']) >> "%SIM_PATH%"
    echo. >> "%SIM_PATH%"
    echo             if 'uv_system_status' in control: >> "%SIM_PATH%"
    echo                 self.uv_system_status = bool(control['uv_system_status']) >> "%SIM_PATH%"
    echo. >> "%SIM_PATH%"
    echo             return {'status': 'success', 'message': 'Control updated'} >> "%SIM_PATH%"
    echo. >> "%SIM_PATH%"
    echo         elif cmd_type == 'acknowledge_alarms': >> "%SIM_PATH%"
    echo             self.alarm_active = False >> "%SIM_PATH%"
    echo             return {'status': 'success', 'message': 'Alarms acknowledged'} >> "%SIM_PATH%"
    echo. >> "%SIM_PATH%"
    echo         else: >> "%SIM_PATH%"
    echo             return {'status': 'error', 'message': f'Unknown command: {cmd_type}'} >> "%SIM_PATH%"
    echo. >> "%SIM_PATH%"
    echo if __name__ == "__main__": >> "%SIM_PATH%"
    echo     try: >> "%SIM_PATH%"
    echo         simulator = WastewaterTreatmentSimulator() >> "%SIM_PATH%"
    echo     except KeyboardInterrupt: >> "%SIM_PATH%"
    echo         print("\nSimulator shutting down...") >> "%SIM_PATH%"
    echo     except Exception as e: >> "%SIM_PATH%"
    echo         print(f"Error: {e}") >> "%SIM_PATH%"
)

:: Run the simulator
cd %BASE_PATH%
echo Launching wastewater treatment simulator...
%PYTHON_PATH% %SIM_PATH%

exit /b 0
